1
00:00:00,700 --> 00:00:03,400
So, the Python grammar is much stricter than the English

2
00:00:03,400 --> 00:00:07,190
grammar or most natural language grammars. In English, if we say

3
00:00:07,190 --> 00:00:11,560
something nongrammatical like me go to the store, another English speaker

4
00:00:11,560 --> 00:00:13,900
might laugh at us. But they can probably understand what we

5
00:00:13,900 --> 00:00:17,780
meant. In Python, the code must match the language grammar exactly.

6
00:00:17,780 --> 00:00:20,360
Here we saw when we tried to evaluate 2 plus without

7
00:00:20,360 --> 00:00:22,590
the extra operand, we got a syntax error, that means it's

8
00:00:22,590 --> 00:00:25,980
not grammatical. If we said 2 plus to someone in English

9
00:00:25,980 --> 00:00:27,840
well they might be able to figure out that that

10
00:00:27,840 --> 00:00:31,030
means the same thing as 2. In Python it needs to

11
00:00:31,030 --> 00:00:34,350
match the grammar exactly. So now we're going to look at the

12
00:00:34,350 --> 00:00:37,680
Python grammar for arithmetic expressions. We won't see the entire Python

13
00:00:37,680 --> 00:00:40,470
grammar here. But enough to get an idea of why the

14
00:00:40,470 --> 00:00:44,232
expressions we've seen were valid and why the 2 plus is

15
00:00:44,232 --> 00:00:46,770
not. So first of all, an expression is something that has

16
00:00:46,770 --> 00:00:51,160
a value. We're going to start our grammar with an non-terminal expression.

17
00:00:51,160 --> 00:00:54,690
And we can make an expression by combining two expressions

18
00:00:54,690 --> 00:00:57,810
with an operator. This is sort of like the sentence

19
00:00:57,810 --> 00:00:59,590
rule we have for English where we could make a

20
00:00:59,590 --> 00:01:03,390
sentence by combining a subject, a verb and an object.

21
00:01:03,390 --> 00:01:05,140
This is a lot more interesting though, because we have

22
00:01:05,140 --> 00:01:08,070
expressions both on the left side and the right side.

23
00:01:09,310 --> 00:01:13,080
This looks kind of circular. Because we have other rules,

24
00:01:13,080 --> 00:01:17,410
it's not completely circular. This is what's called a recursive definition.

25
00:01:17,410 --> 00:01:19,570
We'll talk a lot more about that in a later

26
00:01:19,570 --> 00:01:23,500
class, in unit six we will, but for now, we're going to

27
00:01:23,500 --> 00:01:25,360
just see how we can use that to make the Python

28
00:01:25,360 --> 00:01:28,590
grammar. And to make a good recursive definition, we need at

29
00:01:28,590 --> 00:01:32,840
least two rules. We need one where we can keep going,

30
00:01:32,840 --> 00:01:35,260
using the same thing on the right side as the left

31
00:01:35,260 --> 00:01:38,070
side. And we need one where we can stop. So, another

32
00:01:38,070 --> 00:01:42,540
thing that an expression can be is a number. And this

33
00:01:42,540 --> 00:01:44,980
is why we can make expressions like 1 plus

34
00:01:44,980 --> 00:01:47,980
1. This expression will become a number which will become

35
00:01:47,980 --> 00:01:50,710
one. The operator will become plus, and the other

36
00:01:50,710 --> 00:01:53,100
expression will become one. So let's write a few more

37
00:01:53,100 --> 00:01:55,900
rules to see how that works. So we can

38
00:01:55,900 --> 00:02:00,990
replace the operator with plus. We can also replace operator

39
00:02:00,990 --> 00:02:05,370
with times. And there's several more operators in Python.

40
00:02:05,370 --> 00:02:08,350
Those are enough for now, we just need those two.

41
00:02:08,350 --> 00:02:11,360
We can also make numbers. And the complete rule

42
00:02:11,360 --> 00:02:16,030
for making numbers is sort of complicated, but let's

43
00:02:16,030 --> 00:02:18,730
assume we know what numbers are. We can make

44
00:02:18,730 --> 00:02:22,350
numbers any number of digits. There are different rules to make

45
00:02:22,350 --> 00:02:24,160
all those numbers, but we know what they are.

46
00:02:25,650 --> 00:02:28,450
So, this looks like a very simple grammar. It's

47
00:02:28,450 --> 00:02:31,720
quite small, but it can express infinitely many things.

48
00:02:31,720 --> 00:02:34,130
And the reason for that is because we have expression

49
00:02:34,130 --> 00:02:35,970
on both sides here. That we can replace an

50
00:02:35,970 --> 00:02:39,890
expression with a derivative expression, and keep going. So

51
00:02:39,890 --> 00:02:43,590
here's an example derivation. We can start with expression.

52
00:02:43,590 --> 00:02:45,980
We can follow the rule, replacing that with expression

53
00:02:45,980 --> 00:02:49,280
operator expression. And then, we can follow the rules

54
00:02:49,280 --> 00:02:52,560
again. We can replace the first expression with a

55
00:02:52,560 --> 00:02:56,070
number and replace that number with the actual number

56
00:02:56,070 --> 00:02:59,000
one. And we notice the actual numbers are terminal.

57
00:02:59,000 --> 00:03:01,790
So, once we get to the number one, we're done.

58
00:03:01,790 --> 00:03:04,810
There's no more replacements to do. We can replace the

59
00:03:04,810 --> 00:03:08,540
operator with plus. Plus is also a terminal, and we

60
00:03:08,540 --> 00:03:12,860
can replace this expression with a number, and replace that

61
00:03:12,860 --> 00:03:16,520
number with the number one. So this is how we

62
00:03:16,520 --> 00:03:19,450
got the expression 1 plus 1 in the Python grammar

63
00:03:19,450 --> 00:03:21,620
and that's why that was valid. We can do a

64
00:03:21,620 --> 00:03:24,130
lot more than this though. Instead of replacing this expression

65
00:03:24,130 --> 00:03:27,300
with a number, we can replace this expression with

66
00:03:27,300 --> 00:03:30,420
another expression, operator expression. So we're going to use the

67
00:03:30,420 --> 00:03:33,570
first rule replacing the expression with expression, operator expression

68
00:03:33,570 --> 00:03:38,110
here. I'm going to start abbreviating so Expr is an abbreviation

69
00:03:38,110 --> 00:03:41,200
for expression. Op for operator and Expr but, we're

70
00:03:41,200 --> 00:03:43,430
just using this rule. And now we can do

71
00:03:43,430 --> 00:03:45,610
the same thing again, replacing this expression with a

72
00:03:45,610 --> 00:03:49,580
number and replacing that number, let's say with number two.

73
00:03:51,030 --> 00:03:54,190
We could replace this operator with the multiplication

74
00:03:54,190 --> 00:03:58,680
operator. And we can replace this expression with a

75
00:03:58,680 --> 00:04:00,650
number. Or you could replace it with an

76
00:04:00,650 --> 00:04:04,660
expression, operator, expression. Let's do that, and build increasingly

77
00:04:04,660 --> 00:04:07,630
complicated expressions this way. We can keep doing

78
00:04:07,630 --> 00:04:09,840
this. We are not done until everything is a

79
00:04:09,840 --> 00:04:15,500
terminal. So lets say, we skipped a few steps here, but this could be 3 plus 3.

80
00:04:15,500 --> 00:04:18,300
So this is how we can build up complicated expressions

81
00:04:18,300 --> 00:04:21,779
from very simple rules. So I am going to add one

82
00:04:21,779 --> 00:04:24,690
more rule to our python grammar, that will be enough

83
00:04:24,690 --> 00:04:27,030
to produce all the expressions that we have used so far.

84
00:04:28,350 --> 00:04:31,330
And that rule that we need is for parentheses. And

85
00:04:31,330 --> 00:04:34,060
this is actually quite a simple rule. It just says

86
00:04:34,060 --> 00:04:37,440
we can make an expression by taking any expression we

87
00:04:37,440 --> 00:04:40,590
have and putting parentheses around it. So, this is a pretty

88
00:04:40,590 --> 00:04:44,720
small grammar, but this is actually grammar that's powerful enough

89
00:04:44,720 --> 00:04:48,100
to produce all the Python expressions we've seen so far.

90
00:04:48,100 --> 00:04:51,430
As well as infinitely many different expressions. We're not going to

91
00:04:51,430 --> 00:04:54,040
cover the entire Python grammar this way, but this should

92
00:04:54,040 --> 00:04:56,660
give you an idea of the power of writing our

93
00:04:56,660 --> 00:04:59,480
grammar this way. So we're going to have a quiz to

94
00:04:59,480 --> 00:05:02,720
see that everyone understands the grammar. So the question is

95
00:05:02,720 --> 00:05:05,760
which of the following are valid Python expressions that can

96
00:05:05,760 --> 00:05:09,300
be produced starting from expression using the

97
00:05:09,300 --> 00:05:11,660
grammar rules. So here are the choices; there

98
00:05:11,660 --> 00:05:15,070
are five possibilities, check all the ones that

99
00:05:15,070 --> 00:05:17,630
are valid expressions that can be produced from

100
00:05:17,630 --> 00:05:20,810
this grammar starting from expression. You can try

101
00:05:20,810 --> 00:05:22,820
your answers in the Python interpreter if you

102
00:05:22,820 --> 00:05:26,570
want, but first see if you can figure it out for yourself, which ones are valid.
