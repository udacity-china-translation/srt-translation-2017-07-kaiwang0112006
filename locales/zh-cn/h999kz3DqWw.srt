1
00:00:00,700 --> 00:00:03,400
所以 Python 的语法比英语和大多数自然语言的语法更加严格

2
00:00:03,400 --> 00:00:07,190
英语中 如果我讲了一句不符合语法的话

3
00:00:07,190 --> 00:00:11,560
比如 me go to the store 另一个说英语的人可能会笑话我

4
00:00:11,560 --> 00:00:13,900
但是他们应该能理解我的意思

5
00:00:13,900 --> 00:00:17,780
在 Python 中 代码必须严格符合语法

6
00:00:17,780 --> 00:00:20,360
这里我们看到 我们尝试计算了 2+

7
00:00:20,360 --> 00:00:22,590
缺少额外的运算数 我们得到一个语法错误

8
00:00:22,590 --> 00:00:25,980
这表示它不符合语法 如果我用英语对一个人说 2 plus

9
00:00:25,980 --> 00:00:27,840
他们应该能够明白意思就是 2

10
00:00:27,840 --> 00:00:31,030
Python 中 代码必须严格符合语法

11
00:00:31,030 --> 00:00:34,350
下面我们就来学习一下 Python 中算术表达式的相关语法

12
00:00:34,350 --> 00:00:37,680
这里我们不会看到 Python 的全部语法

13
00:00:37,680 --> 00:00:40,470
但是对于理解为什么我们在这里看到的表达式是合法的

14
00:00:40,470 --> 00:00:44,232
而 2+ 是不合法的已经足够了

15
00:00:44,232 --> 00:00:46,770
首先 表达式有自己的值

16
00:00:46,770 --> 00:00:51,160
我们从一个非终止符表达式开始

17
00:00:51,160 --> 00:00:54,690
我们可以通过运算符连接两个表达式而得到另一个表达式

18
00:00:54,690 --> 00:00:57,810
这与我们在英语中

19
00:00:57,810 --> 00:00:59,590
的句子的规则类似 句法规则中

20
00:00:59,590 --> 00:01:03,390
可以通过一个动词连接两个事物名词构成句子

21
00:01:03,390 --> 00:01:05,140
可是这里的语法更有趣一些

22
00:01:05,140 --> 00:01:08,070
因为在左右两侧都有表达式

23
00:01:09,310 --> 00:01:13,080
这有点像一个循环 不过因为我们还有别的规则

24
00:01:13,080 --> 00:01:17,410
所以并不是彻底的循环 这称为递归定义

25
00:01:17,410 --> 00:01:19,570
我们在后面的课程中会对其进一步讨论

26
00:01:19,570 --> 00:01:23,500
就在第六单元 但是目前 我们先来看一下

27
00:01:23,500 --> 00:01:25,360
如何利用递归定义构成 Python 的语法

28
00:01:25,360 --> 00:01:28,590
要构建一个好的递归定义

29
00:01:28,590 --> 00:01:32,840
我们至少需要两条规则 一条规则要能持续运行

30
00:01:32,840 --> 00:01:35,260
即左右两侧要是同一类型的东西

31
00:01:35,260 --> 00:01:38,070
另一个是可终止的规则

32
00:01:38,070 --> 00:01:42,540
如表达式可以是数字

33
00:01:42,540 --> 00:01:44,980
所以我们可以创建类似 1 + 1 这样的表达式

34
00:01:44,980 --> 00:01:47,980
这个表达式会被替换成数字 然后数字又被替换成 1

35
00:01:47,980 --> 00:01:50,710
运算符被替换成 + 

36
00:01:50,710 --> 00:01:53,100
另一个表达式也被替换成 1

37
00:01:53,100 --> 00:01:55,900
我们再写一些规则 看看它是如何工作的

38
00:01:55,900 --> 00:02:00,990
所以我们既可以把运算符替换成 + 也可以把运算符替换成 *

39
00:02:00,990 --> 00:02:05,370
Python 中还有几种运算符

40
00:02:05,370 --> 00:02:08,350
不过这两种对于目前来说足够了

41
00:02:08,350 --> 00:02:11,360
我们还可以指定数字 

42
00:02:11,360 --> 00:02:16,030
对于数字的完整规则比较复杂

43
00:02:16,030 --> 00:02:18,730
但是现在我们假设这些数字已知

44
00:02:18,730 --> 00:02:22,350
我们可以指定不同位数的数字

45
00:02:22,350 --> 00:02:24,160
指定这些数字有不同的规则 但是我们知道这些数字是什么

46
00:02:25,650 --> 00:02:28,450
这看上去是一个非常简单的语法

47
00:02:28,450 --> 00:02:31,720
它虽然很短 却能表达无穷无尽的内容

48
00:02:31,720 --> 00:02:34,130
原因就是两侧都有表达式

49
00:02:34,130 --> 00:02:35,970
我们可以用一个衍生的表达式

50
00:02:35,970 --> 00:02:39,890
替换另一个表达式 并这样重复下去

51
00:02:39,890 --> 00:02:43,590
这里是一个衍生的例子 我们从表达式开始

52
00:02:43,590 --> 00:02:45,980
然后根据规则 把它替换成表达式 运算符 表达式

53
00:02:45,980 --> 00:02:49,280
然后 我们再次使用这个规则

54
00:02:49,280 --> 00:02:52,560
我们把第一个表达式替换成数字

55
00:02:52,560 --> 00:02:56,070
然后把数字替换成实际的数字 1

56
00:02:56,070 --> 00:02:59,000
此时发现实际的数字是一个终止

57
00:02:59,000 --> 00:03:01,790
所以 一旦出现数字 1 我们就结束了

58
00:03:01,790 --> 00:03:04,810
不需要进行更多的替换 我们可以把运算符替换成 +

59
00:03:04,810 --> 00:03:08,540
+ 也是一个终止符

60
00:03:08,540 --> 00:03:12,860
我们把这个表达式也替换成数字

61
00:03:12,860 --> 00:03:16,520
然后再把数字替换成实际数字 1

62
00:03:16,520 --> 00:03:19,450
这就是我们通过 Python 语法生成 1 + 1 的过程

63
00:03:19,450 --> 00:03:21,620
以及为什么这个表达式是有效的

64
00:03:21,620 --> 00:03:24,130
然而我们还能做得更复杂些 

65
00:03:24,130 --> 00:03:27,300
不是将表达式替换成数字

66
00:03:27,300 --> 00:03:30,420
而是把表达式替换成另一个表达式 运算符 表达式 我们使用第一条规则

67
00:03:30,420 --> 00:03:33,570
把表达式替换成表达式 运算符 表达式

68
00:03:33,570 --> 00:03:38,110
下面我将使用缩写 Expr 是表达式的缩写

69
00:03:38,110 --> 00:03:41,200
Op 是运算符的缩写 又一个 Expr 

70
00:03:41,200 --> 00:03:43,430
不过我们用的还是这条规则 然后可以

71
00:03:43,430 --> 00:03:45,610
像刚才那样 把表达式替换成数字

72
00:03:45,610 --> 00:03:49,580
然后再用实际数字替换数字 就用 2 吧

73
00:03:51,030 --> 00:03:54,190
我们可以把这里的运算符替换成乘法运算符

74
00:03:54,190 --> 00:03:58,680
然后可以把这个表达式也替换成数字

75
00:03:58,680 --> 00:04:00,650
或者替换成表达式 运算符 表达式

76
00:04:00,650 --> 00:04:04,660
就这样做 逐步把这个表达式写得更加复杂

77
00:04:04,660 --> 00:04:07,630
我们可以一直重复下去

78
00:04:07,630 --> 00:04:09,840
直到所有元素都是终止符

79
00:04:09,840 --> 00:04:15,500
我们省略了一些步骤 这里可以是 3 + 3

80
00:04:15,500 --> 00:04:18,300
这就是如何通过非常简单的规则

81
00:04:18,300 --> 00:04:21,779
构造复杂的表达式 下面我们会增加一条规则

82
00:04:21,779 --> 00:04:24,690
到 Python 语法中

83
00:04:24,690 --> 00:04:27,030
然后我们的语法就足够生成目前我们用到的全部表达式了

84
00:04:28,350 --> 00:04:31,330
我们需要的这条规则是使用圆括号

85
00:04:31,330 --> 00:04:34,060
这实际上也是一个非常简单的规则

86
00:04:34,060 --> 00:04:37,440
它所表达的是我们可以把一个已知的表达式

87
00:04:37,440 --> 00:04:40,590
用圆括号括起来成为一个新表达式

88
00:04:40,590 --> 00:04:44,720
这是一个很短的语法 但实际上它已经强大到

89
00:04:44,720 --> 00:04:48,100
足够生成目前我们见过的所有 Python 表达式了

90
00:04:48,100 --> 00:04:51,430
以及非常多不同的表达式

91
00:04:51,430 --> 00:04:54,040
我们用这种方式无法涵盖全部的 Python 语法

92
00:04:54,040 --> 00:04:56,660
但是会使你了解这样书写语法的强大之处

93
00:04:56,660 --> 00:04:59,480
下面通过一个测试题

94
00:04:59,480 --> 00:05:02,720
来检验大家是否理解了这个语法 这个问题是

95
00:05:02,720 --> 00:05:05,760
下列选项中 哪些是能够使用上述从表达式开始的语法生成的

96
00:05:05,760 --> 00:05:09,300
合法的 Python 表达式？

97
00:05:09,300 --> 00:05:11,660
这里是选项 一共五个

98
00:05:11,660 --> 00:05:15,070
选择所有

99
00:05:15,070 --> 00:05:17,630
能够使用上述从表达式开始的语法生成的

100
00:05:17,630 --> 00:05:20,810
生成的合法 Python 表达式

101
00:05:20,810 --> 00:05:22,820
如果需要的话你可以在 Python 解释器中测试你的答案

102
00:05:22,820 --> 00:05:26,570
不过最好还是先看看能不能自己找出正确答案